/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 ./public/name-tag.glb --types 
*/

import * as THREE from 'three';
import { Html, useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useContext } from 'react';
import {
    DIFFICULTY_DISPLAY_NAME_MAP,
    GameContext,
    GameStatus,
} from '../game-manager/game-manager';

type GLTFResult = GLTF & {
    nodes: {
        Cube: THREE.Mesh;
    };
    materials: {};
};

export function NameTag(props: JSX.IntrinsicElements['group']) {
    const { userName, difficulty, score, status } = useContext(GameContext);
    const { nodes } = useGLTF('/name-tag.glb') as GLTFResult;

    return (
        <group {...props} dispose={null}>
            {status === GameStatus.Playing && (
                <Html
                    position={[0, 0.5, 0]}
                    rotation={[0, Math.PI / 2, 0]}
                    transform
                >
                    <div
                        style={{
                            display: 'flex',
                            flexDirection: 'column',
                            fontSize: '8px',
                            width: '175px',
                        }}
                    >
                        <div
                            style={{
                                display: 'flex',
                                flexDirection: 'row',
                                justifyContent: 'space-between',
                            }}
                        >
                            <div>{userName}</div>
                            <div>{`${score} pts`}</div>
                        </div>
                        <div>{DIFFICULTY_DISPLAY_NAME_MAP[difficulty]}</div>
                    </div>
                </Html>
            )}
            <mesh
                geometry={nodes.Cube.geometry}
                position={[0, 0.53, 0]}
                rotation={[0, 0, 0.283]}
                scale={[0.15, 0.641, 4.677]}
            >
                <meshStandardMaterial color="orange" />
            </mesh>
        </group>
    );
}

useGLTF.preload('/name-tag.glb');
